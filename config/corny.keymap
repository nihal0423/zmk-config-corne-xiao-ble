#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <0>;
    hold-trigger-on-release;
    hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 31 32 33 34 35 36 37 41 42 43 0 1 2 3 4 5 13 14 15 16 17 24 25 26 27 28 29 30 38 39 40 12>;
};

/ {
    behaviors {
        td_mo_1: td_mo_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MO_1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
        };

        td_mo_2: td_mo_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MO_2";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&to 2>;
        };

        home_row_mod_right: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 40 39 38 30>;
            hold-trigger-on-release;
        };

        home_row_mod_left: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 31 32 33 34 35 36 37 41 42 43>;
            hold-trigger-on-release;
        };

        td_bt_next_prev: td_bt_next_prev {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BT_NEXT_PREV";
            #binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;

            tapping-term-ms = <300>;
        };

        td_pp_next: td_pp_next {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PP_NEXT";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>;

            tapping-term-ms = <300>;
        };
    };

    macros {
        firefox: firefox {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp F &kp I &kp R &kp E &kp F &kp O &kp X &kp ENTER>;
            label = "FIREFOX";
        };

        chrome: chrome {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp C &kp H &kp R &kp O &kp M &kp E &kp ENTER>;
            label = "CHROME";
        };

        navicat: navicat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp N &kp A &kp V &kp I &kp C &kp A &kp T &kp ENTER>;
            label = "NAVICAT";
        };

        docker: docker {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp D &kp O &kp C &kp K &kp E &kp R &kp ENTER>;
            label = "DOCKER";
        };

        alacritty: alacritty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp A &kp L &kp A &kp C &kp R &kp I &kp T &kp T &kp Y &kp ENTER>;
            label = "ALACRITTY";
        };

        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp COLON &kp W &kp ENTER>;
            label = "VIM_SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB       &kp Q                       &kp W                          &kp E                        &kp R                              &kp T                                     &kp Y      &kp U                                &kp I                         &kp O                            &kp P                                   &kp BSPC
&lt 3 ESCAPE  &home_row_mod_left LCTRL A  &home_row_mod_left LEFT_ALT S  &home_row_mod_left LSHIFT D  &home_row_mod_left LEFT_COMMAND F  &kp G                                     &kp H      &home_row_mod_right RIGHT_COMMAND J  &home_row_mod_right RSHIFT K  &home_row_mod_right RIGHT_ALT L  &home_row_mod_right RIGHT_CONTROL SEMI  &kp SQT
&kp LCTRL     &kp Z                       &kp X                          &kp C                        &kp V                              &kp B      &td_pp_next  &kp LEFT_COMMAND  &kp N      &kp M                                &kp COMMA                     &kp DOT                          &kp FSLH                                &vim_save
                                                                         &kp LALT                     &td_mo_1                           &kp SPACE                                 &kp ENTER  &td_mo_2                             &kp LEFT_SHIFT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        num_layer {
            bindings = <
&td_bt_next_prev  &trans  &trans  &trans  &trans  &none                             &trans  &kp N7  &kp N8  &kp N9  &none    &trans
&bt BT_CLR        &trans  &trans  &trans  &trans  &trans                            &trans  &kp N4  &kp N5  &kp N6  &trans   &trans
&trans            &trans  &trans  &trans  &trans  &trans  &bootloader  &bootloader  &kp N0  &kp N1  &kp N2  &kp N3  &kp DOT  &trans
                                  &trans  &to 0   &trans                            &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp F5 F6>,
                <&inc_dec_kp C_BRIGHTNESS_DEC C_BRIGHTNESS_INC>;
        };

        symbol_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT     &kp HASH          &kp DLLR                 &kp PRCNT                &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&kp LCTRL  &trans    &trans     &kp LG(LEFT)      &kp LG(RIGHT_ARROW)      &trans                   &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &kp LG(W)  &kp LA(LG(LEFT))  &kp LA(LG(RIGHT_ARROW))  &trans     &none  &none  &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                &trans            &trans                   &trans                   &trans     &to 0      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        macros {
            bindings = <
&trans  &trans      &trans                                 &trans   &trans    &trans                  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &alacritty  &mt LG(LS(NUMBER_5)) LS(LG(NUMBER_4))  &docker  &firefox  &trans                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans      &trans                                 &chrome  &trans    &trans  &trans  &trans  &navicat  &trans    &trans  &trans     &trans  &trans
                                                           &trans   &trans    &trans                  &trans    &trans    &trans
            >;
        };
    };
};
